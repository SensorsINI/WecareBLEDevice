<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out_DA14531\Objects\uart_531.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out_DA14531\Objects\uart_531.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Nov 22 23:46:10 2021
<BR><P>
<H3>Maximum Stack Usage =        104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; uart_periph_init &rArr; uart_initialize &rArr; uart_dma_init &rArr; dma_initialize
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[c]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">ADC_Handler</a><BR>
 <LI><a href="#[22]">HardFault_HandlerC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">HardFault_HandlerC</a><BR>
 <LI><a href="#[21]">NMI_HandlerC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">NMI_HandlerC</a><BR>
 <LI><a href="#[44]">uart_write_byte</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">uart_write_byte</a><BR>
 <LI><a href="#[4c]">uart_read_byte</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">uart_read_byte</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[e]">BLE_RF_DIAG_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[6]">BLE_WAKEUP_LP_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[19]">DMA_Handler</a> from dma.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[10]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[11]">GPIO1_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[12]">GPIO2_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[13]">GPIO3_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[14]">GPIO4_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[22]">HardFault_HandlerC</a> from exceptions.o(.text) referenced from startup_da14531.o(.text)
 <LI><a href="#[a]">I2C_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[d]">KEYBRD_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[21]">NMI_HandlerC</a> from exceptions.o(.text) referenced from startup_da14531.o(.text)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1b]">RESERVED21_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1c]">RESERVED22_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1d]">RESERVED23_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[f]">RFCAL_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[18]">RTC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[b]">SPI_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[17]">SWTIM1_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[15]">SWTIM_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_da14531.o(.text) referenced from startup_da14531.o(.text)
 <LI><a href="#[9]">UART2_Handler</a> from uart.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[8]">UART_Handler</a> from uart.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[16]">WKUP_QUADEC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1a]">XTAL32M_RDY_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_da14531.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7]">rwble_isr</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[27]">uart_read_cb</a> from uart_loopback_examples.o(.text) referenced from uart_loopback_examples.o(.text)
 <LI><a href="#[26]">uart_receive_cb</a> from uart_receive_examples.o(.text) referenced from uart_receive_examples.o(.text)
 <LI><a href="#[24]">uart_rx_dma_callback</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[25]">uart_send_cb</a> from uart_send_examples.o(.text) referenced from uart_send_examples.o(.text)
 <LI><a href="#[23]">uart_tx_dma_callback</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[28]">uart_write_cb</a> from uart_loopback_examples.o(.text) referenced from uart_loopback_examples.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[85]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[86]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[87]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[88]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[89]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BLE_RF_DIAG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BLE_WAKEUP_LP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>KEYBRD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RESERVED21_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RESERVED22_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RESERVED23_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RFCAL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SWTIM1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SWTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WKUP_QUADEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>XTAL32M_RDY_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>rwble_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system_da14531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>HardFault_HandlerC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_HandlerC
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_HandlerC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>NMI_HandlerC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_HandlerC
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_HandlerC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>syscntl_dcdc_get_level</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, syscntl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc_cfg
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_turn_on_in_boost
</UL>

<P><STRONG><a name="[56]"></a>syscntl_dcdc_set_level</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, syscntl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_disable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc_cfg
</UL>

<P><STRONG><a name="[2e]"></a>syscntl_dcdc_turn_on_in_boost</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, syscntl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscntl_dcdc_turn_on_in_boost
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_is_dcdc_reserved
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[72]"></a>GPIO_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[35]"></a>GPIO_SetPinFunction</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[34]"></a>GPIO_SetInactive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[33]"></a>GPIO_SetActive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[32]"></a>GPIO_ConfigurePin</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_periph_init
</UL>

<P><STRONG><a name="[36]"></a>GPIO_ResetIRQ</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>

<P><STRONG><a name="[38]"></a>GPIOn_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[10]"></a>GPIO0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO0_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIO1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO1_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPIO2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO2_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIO3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO3_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIO4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO4_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>dma_channel_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_helper
</UL>

<P><STRONG><a name="[19]"></a>DMA_Handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Handler &rArr; dma_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_helper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>dma_initialize</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_init
</UL>

<P><STRONG><a name="[47]"></a>dma_register_callback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[48]"></a>dma_channel_start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[8]"></a>UART_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Handler &rArr; uart_intr_hndl &rArr; uart_tx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UART2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_Handler &rArr; uart_intr_hndl &rArr; uart_tx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>uart_enable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[42]"></a>uart_baudrate_setf</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_baudrate_setf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[70]"></a>uart_register_tx_cb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_interrupt_example
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_dma_example
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_loopback_interrupt_example
</UL>

<P><STRONG><a name="[71]"></a>uart_register_rx_cb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_interrupt_example
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_dma_example
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_loopback_interrupt_example
</UL>

<P><STRONG><a name="[40]"></a>uart_initialize</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_initialize &rArr; uart_dma_init &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_baudrate_setf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_periph_init
</UL>

<P><STRONG><a name="[44]"></a>uart_write_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_buffer
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>

<P><STRONG><a name="[45]"></a>uart_write_buffer</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[46]"></a>uart_send</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_buffer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_interrupt_example
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_dma_example
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_blocking_example
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_loopback_interrupt_example
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[4c]"></a>uart_read_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_buffer
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
</UL>

<P><STRONG><a name="[4d]"></a>uart_read_buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_read_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>

<P><STRONG><a name="[4e]"></a>uart_receive</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_receive &rArr; uart_read_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_buffer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_interrupt_example
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_dma_example
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_blocking_example
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_loopback_interrupt_example
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_cb
</UL>

<P><STRONG><a name="[50]"></a>printf_byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = printf_byte &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_word
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
</UL>

<P><STRONG><a name="[51]"></a>printf_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = printf_string &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_interrupt_example
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_dma_example
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_blocking_example
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_interrupt_example
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_dma_example
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_blocking_example
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_loopback_interrupt_example
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_example
</UL>

<P><STRONG><a name="[53]"></a>print_hword</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_hword &rArr; printf_byte &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_interrupt_example
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_dma_example
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_example
</UL>

<P><STRONG><a name="[54]"></a>print_word</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_word &rArr; printf_byte &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_example
</UL>

<P><STRONG><a name="[57]"></a>hw_otpc_enter_mode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_otpc_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hw_otpc_enter_mode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[2f]"></a>hw_otpc_is_dcdc_reserved</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_otpc_531.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_turn_on_in_boost
</UL>

<P><STRONG><a name="[5a]"></a>hw_otpc_set_speed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_otpc_531.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_init
</UL>

<P><STRONG><a name="[59]"></a>hw_otpc_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hw_otpc_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_otpc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_set_speed
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[5b]"></a>hw_otpc_disable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hw_otpc_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_otpc_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[5c]"></a>otp_cs_store</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, otp_cs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = otp_cs_store &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sb_set_debugger_mode (Weak Reference)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_adc_offset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_adc_ge
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[75]"></a>otp_cs_get_xtal32m_trim_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, otp_cs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[61]"></a>uart_print_example</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart_print_example &rArr; print_word &rArr; printf_byte &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_word
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = main &rArr; uart_periph_init &rArr; uart_initialize &rArr; uart_dma_init &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_interrupt_example
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_dma_example
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_blocking_example
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_interrupt_example
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_dma_example
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_blocking_example
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_periph_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_loopback_interrupt_example
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_example
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[63]"></a>uart_periph_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, user_periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_periph_init &rArr; uart_initialize &rArr; uart_dma_init &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>periph_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, user_periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = periph_init &rArr; syscntl_dcdc_turn_on_in_boost
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_turn_on_in_boost
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[6f]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_get_byte
</UL>

<P><STRONG><a name="[6d]"></a>buffer_is_full</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_put_byte
</UL>

<P><STRONG><a name="[6c]"></a>buffer_put_byte</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = buffer_put_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_cb
</UL>

<P><STRONG><a name="[6e]"></a>buffer_get_byte</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = buffer_get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_loopback_interrupt_example
</UL>

<P><STRONG><a name="[64]"></a>uart_send_blocking_example</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart_send_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart_send_blocking_example &rArr; printf_string &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>uart_send_interrupt_example</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart_send_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_send_interrupt_example &rArr; print_hword &rArr; printf_byte &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_register_tx_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>uart_send_dma_example</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart_send_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_send_dma_example &rArr; print_hword &rArr; printf_byte &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_register_tx_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>uart_receive_blocking_example</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uart_receive_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart_receive_blocking_example &rArr; printf_string &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>uart_receive_interrupt_example</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, uart_receive_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart_receive_interrupt_example &rArr; printf_string &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_register_rx_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>uart_receive_dma_example</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, uart_receive_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart_receive_dma_example &rArr; printf_string &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_register_rx_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>uart_loopback_interrupt_example</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, uart_loopback_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart_loopback_interrupt_example &rArr; printf_string &rArr; uart_send &rArr; uart_write_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_register_rx_cb
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_register_tx_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>set_xtal32m_trim_value</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_xtal32m_trim_value
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[62]"></a>system_init</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = system_init &rArr; otp_cs_store &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_get_xtal32m_trim_value
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_disable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_enter_mode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sb_read_otp_header (Weak Reference)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_indication (Weak Reference)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_xtal32m_trim_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_init
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_otpc_531.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_enter_mode
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_da14531.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[31]"></a>dcdc_cfg</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, syscntl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_turn_on_in_boost
</UL>

<P><STRONG><a name="[37]"></a>gpioshift16</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
</UL>

<P><STRONG><a name="[39]"></a>dma_helper</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_stop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>

<P><STRONG><a name="[3b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_initialize
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_helper
</UL>

<P><STRONG><a name="[4a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[3e]"></a>uart_rx_isr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_rx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_hndl
</UL>

<P><STRONG><a name="[23]"></a>uart_tx_dma_callback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>uart_rx_dma_callback</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rx_dma_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>uart_intr_hndl</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_intr_hndl &rArr; uart_tx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_isr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[4b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[49]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[3f]"></a>uart_tx_isr</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_tx_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_hndl
</UL>

<P><STRONG><a name="[43]"></a>uart_dma_init</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_dma_init &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_initialize
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
</UL>

<P><STRONG><a name="[55]"></a>dcdc_cfg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hw_otpc_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcdc_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_enter_mode
</UL>

<P><STRONG><a name="[5f]"></a>calc_adc_ge</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, otp_cs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
</UL>

<P><STRONG><a name="[60]"></a>calc_adc_offset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, otp_cs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
</UL>

<P><STRONG><a name="[25]"></a>uart_send_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_send_examples.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart_send_examples.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>uart_receive_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_receive_examples.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart_receive_examples.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>uart_read_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_loopback_examples.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_read_cb &rArr; uart_receive &rArr; uart_read_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_put_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_loopback_examples.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>uart_write_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_loopback_examples.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart_loopback_examples.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>

<P><STRONG><a name="[73]"></a>reset_indication</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[74]"></a>sb_read_otp_header</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[5d]"></a>sb_set_debugger_mode</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
</UL>
<HR></body></html>
